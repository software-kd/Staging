@model Mayflower.Models.LoginModel

@{
    var routeValues = HttpContext.Current.Request.RequestContext.RouteData.Values;
    object style;
    if (routeValues["action"].ToString() == "Login" || routeValues["action"].ToString().ToLower() == "login")
    { style = "display:block; margin-top: 15px"; }
    else { style = "display:none; margin-top: 15px"; }
}

@using (Html.BeginForm("login", "account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post,
                                                    new { @Id = "login-form", @role = "form", @class = "form-border", style }))
{
    @Html.AntiForgeryToken()

    if (!string.IsNullOrEmpty(ViewBag.UserNotAuthorized))
    {
        <div class="notice-msg textforerrormsg">
            @ViewBag.UserNotAuthorized
        </div>
    }

    if (Request.QueryString["status"] != null)
    {
        string msg = "";
        string status = Request.QueryString["status"] != null ? Request.QueryString["status"].ToString() : "";
        switch (status)
        {
            case "link-expired":
                msg = "The reset link is expired. Please request again.";
                break;
            default:
                break;
        }
        if (msg != "")
        {
            <div class="notice-msg textforerrormsg">
                @msg
            </div>
        }
    }

    <div class="form-group float-label-control">
        <div class="s3-1_cf_lable_text">Email Address</div>
        @Html.TextBoxFor(m => m.Email, new { @class = "s3-1_full_textbox_com", @required = "required", @style = "padding-right:24px" })
        @Html.ValidationMessageFor(m => m.Email, null, new { @class = "textforerrormsg" })
    </div>
    @*@Html.ValidationMessageFor(m => m.Email, null, new { @class = "validation" })*@
    <div class="form-group float-label-control">
        <div class="s3-1_cf_lable_text mt20">Password</div>
        @Html.PasswordFor(m => m.Pwd, new { @class = "s3-1_full_textbox_com", @required = "required", @style = "padding-right:24px" })
        @Html.ValidationMessageFor(m => m.Pwd, null, new { @class = "textforerrormsg" })
    </div>
    @*@Html.ValidationMessageFor(m => m.Pwd, null, new { @class = "validation" })*@

    <div class="checkbox" style="margin-top: 8px;">
        <label style="font-family: 'Conv_Ubuntu-Light';font-size: 13px;line-height: 32px;cursor: pointer">
            <input type="checkbox" name="rememberMe" id="rememberMe" value="true" style="height: 25px;width: 21px;margin-left: 0;margin-right: 10px;vertical-align: bottom;cursor: pointer;">Stay logged in
        </label>
    </div>

    <div class="member_login_text">
        @*Having problems on login? <a href="@Url.Action("Help", "Account")">Click HERE</a><br>*@
        <a href="@Url.Action("ResetPassword", "Account")">Retrieve / Reset Password</a><br>
        Not a member yet? <a href="~/Register">Register Now</a>
    </div>
    <div class="mem_text_center">
        <button type="submit" value="Login" name="btnLogin" class="s3-1_submit_button mem_marbotzero add-cursor-pointer">Login Now</button>
    </div>
}