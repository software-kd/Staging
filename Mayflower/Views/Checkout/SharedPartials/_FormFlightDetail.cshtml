@using Alphareds.Module.Common;
@using Alphareds.Module.Model;
@model Alphareds.Module.Model.CheckoutProduct

@functions{
    Mayflower.General.CustomPrincipal customPrincipal = null;
}

@{
    customPrincipal = User as Mayflower.General.CustomPrincipal;
    int counter = 0;
    List<TravellerDetail> traveller = Model.Flight.TravellerDetails;
    List<SelectListItem> titleList = UtilitiesService.GetTitleList(true, "ADT");
    List<SelectListItem> contactTitleList = UtilitiesService.GetTitleList(true, "ADT", Model.ContactPerson != null ? Model.ContactPerson.Title : string.Empty);
    List<string> guestValue = new List<string>();

    foreach (var item in Model.Flight.FlightInfo.SupplierFlightInfo.PricingInfo.FareBreakDown.Where(x => x.PassengerTypeQuantity > 0))
    {
        for (int i = 0; i < item.PassengerTypeQuantity; i++)
        {
            guestValue.Add(item.PassengerTypeCode);
        }
    }
}

<!-- guest form start -->
@foreach (var item in guestValue)
{
    counter += 1;
    string selector = "guest" + counter.ToString() + "form";
    int totalGuest = guestValue.Count;
    @guestForm(selector, counter - 1, totalGuest, item)
}

@functions{
    private IEnumerable<SelectListItem> SetSelectedItem(IEnumerable<SelectListItem> list, string value)
    {
        return from a in list
               select new SelectListItem
               {
                   Text = a.Text,
                   Value = a.Value,
                   Selected = a.Value == value
               };
    }
}

@helper guestForm(string guestValue, int counter, int totalGuest, string guestType)
    {
        List<SelectListItem> titleList = UtilitiesService.GetTitleList(true, guestType == "INF" || guestType == "CNN" ? "CNN" : guestType);

        <!-- guest form start -->
        <div class="contact_detail_heading_small" value="@guestValue" aria-expanded="false">
            <div class="chhc_bar tab_l">Guest @(counter + 1) Details</div>
        </div>
        <div id="@guestValue" class="booking-form">

            @FlightguestForm(guestValue, counter, totalGuest, guestType, Model.Flight)

            @if (Model.Hotel != null && Model.Hotel.RoomDetails != null && guestType == "ADT")
            {
                int j = 1;
                IEnumerable<SelectListItem> roomDropDown = from a in Model.Hotel.RoomDetails
                                                           select new SelectListItem
                                                           {
                                                               Text = "Room " + (j++).ToString("D2") + " " + a.RoomTypeName,
                                                               Value = a.RoomTypeCode + "_" + j,
                                                               Selected = (Model.Flight.TravellerDetails[counter].HotelSpecialRequest != null ? (Model.Flight.TravellerDetails[counter].HotelSpecialRequest.RoomType == a.RoomTypeCode + "_" + j) : false),
                                                           };

                List<DisplaySpecialRequestModel> roomBedType = new List<DisplaySpecialRequestModel>();
                if (Model.Hotel.RoomDetails.Any(x => x.SpecialRequestAvailable != null) && Model.Hotel.RoomDetails.Any(x => x.SpecialRequestAvailable.BeddingRequest.Count > 1))
                {
                    foreach (var room in Model.Hotel.RoomDetails)
                    {
                        DisplaySpecialRequestModel DisplaySpecialRequest = new DisplaySpecialRequestModel();
                        if (room.SpecialRequestAvailable != null && room.SpecialRequestAvailable.BeddingRequest.Count > 1)
                        {
                            DisplaySpecialRequest.RoomTypeCode = room.RoomTypeCode;
                            DisplaySpecialRequest.BeddingRequest = new List<BedModel>();
                            foreach (var bed in room.SpecialRequestAvailable.BeddingRequest)
                            {
                                DisplaySpecialRequest.BeddingRequest.Add(new BedModel
                                {
                                    BetTypeID = bed.BetTypeID,
                                    BedName = bed.BedName
                                });
                            }
                        }
                        else
                        {
                            DisplaySpecialRequest = null;
                        }
                        roomBedType.Add(DisplaySpecialRequest);
                    }
                }
                @HotelSRForm(guestValue, counter, totalGuest, guestType, Model.Flight, roomDropDown, roomBedType)
            }

            @{ string buttonType = (counter + 1 == totalGuest) ? "submit" : "button"; }
            <div>
                <button name="" type="@buttonType" id="btnSubmitForm" class="s3-1_form_button add-cursor-pointer">
                    <span>Complete form to continue</span><img class="btn-loadstate" src="/Images/loading_40x40.gif" style="width: 20px;display: none;vertical-align: middle;margin-left: 1em;">
                </button>
                @*<input name="" type="@buttonType" value="Complete form to continue" class="s3-1_form_button add-cursor-pointer">*@
            </div>

        </div>
        <!-- guest form end -->
}

@helper FlightguestForm(string guestValue, int counter, int totalGuest, string guestType, ProductFlight Model)
    {
bool isGATE = Model.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.GATE_Chn
          || Model.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.GATE_Int;
bool isAirAsia = Model.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.AirAsia;
bool isTCG = Model.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.TCG;
bool isBA = Model.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.BritishAirways;
bool isSACS = Model.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.SACS;
bool isFRFY = Model.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.Firefly;
bool gotSSR = Model.FlightInfo.AvaSSR != null && Model.FlightInfo.AvaSSR.Count > 0;
bool isReturn = Model.SearchFlightInfo.TripType == "Return";

string outboundSegment = Model.FlightInfo.FlightDetailInfo.Origin + " > "
                         + Model.FlightInfo.FlightDetailInfo.FlightTrip
                         .FirstOrDefault(x => x.RouteType == Alphareds.Module.Model.RouteType.Outbound)
                         .FlightRouteInfo.Select(x => x.ArriveAirportCode)
                         .Aggregate((current, next) => current + " > " + next);

string inboundSegment = isReturn ? Model.FlightInfo.FlightDetailInfo.Destination + " > "
                         + Model.FlightInfo.FlightDetailInfo.FlightTrip
                         .FirstOrDefault(x => x.RouteType == Alphareds.Module.Model.RouteType.Inbound)
                         .FlightRouteInfo.Select(x => x.ArriveAirportCode)
                         .Aggregate((current, next) => current + " > " + next)
                         : string.Empty;

        @Html.HiddenFor(model => Model.TravellerDetails[counter].PassengerType, new { Value = guestType })
        @*@Html.HiddenFor(model => Model.TravellerDetails[counter]._DepartureDate, new { Value = departDate.ToString("yyyy-MM-dd") })*@

    List<SelectListItem> FrequentTravellerList = new List<SelectListItem>();
    if (User.Identity.IsAuthenticated)
    {
        FrequentTravellerList = UtilitiesService.GetFrequentFlyerListByGrpID(customPrincipal.UserId, Model.TravellerDetails[counter].FrequentTravellerID, null);
    }
    if(FrequentTravellerList.Count > 0){
            <div class="s3-1_fullform_left">
                <div class="s3-1_contactform_right">
                    <div class="s3-1_cf_lable_text">Select Traveller Flyer</div>
                    <div>
                        @Html.DropDownListFor(model => Model.TravellerDetails[counter].FrequentTravellerID, FrequentTravellerList, "-", new { @class = "s3-1_full_selectbox_com" })
                    </div>
                </div>
                <div class="clear"></div>
            </div>
        }
        else
        {
            <div class="s3-1_fi_flying_icon s3-1_fi_flying_icon2"></div>
        }
        <!-- line start -->
        <div class="s3-1_fi_row1">
            <div class="s3-1_fir1_b1">
                <div class="s3-1_cf_lable_text">Title<span>*</span></div>
                <div class="impreq_padding_right">
                    <div>
                        @if (isSACS || isBA)
                        {
                            @Html.DropDownListFor(model => Model.TravellerDetails[counter].Title, UtilitiesService.GetTitleList(true, guestType == "INF" || guestType == "CNN" ? "CNN" : guestType, Model.TravellerDetails[counter].Title), "-", new { @class = "s3-1_title" })
                        }
                        else
                        {
                            @*@Html.DropDownListFor(model => Model.TravellerDetails[counter].Title, titleList, new { @class = "s3-1_title" })*@
                            @Html.DropDownListFor(model => Model.TravellerDetails[counter].Title, UtilitiesService.GetTitleListNotSabre(true, "ADT", Model.TravellerDetails[counter].Title), "-", new { @class = "s3-1_title" })
                        }

                        <div class="field_error_msg">@Html.ValidationMessageFor(model => Model.TravellerDetails[counter].Title, null, new { @class = "textforerrormsg" })</div>
                    </div>
                </div>
            </div>
            <div class="s3-1_fir1_b2">
                <div class="s3-1_cf_lable_text">First Name<span>*</span> (As per passport)</div>
                <div class="impreq_padding_right">
                    <div>@Html.TextBoxFor(model => Model.TravellerDetails[counter].GivenName, new { @class = "s3-1_full_textbox_name_com", @required = "required" })</div>
                    <div class="field_error_msg">@Html.ValidationMessageFor(model => Model.TravellerDetails[counter].GivenName, null, new { @class = "textforerrormsg" })</div>
                </div>
            </div>
            <div class="s3-1_fir1_b3">
                <div class="s3-1_cf_lable_text">Last Name<span>*</span> (As per passport)</div>
                <div>@Html.TextBoxFor(model => Model.TravellerDetails[counter].Surname, new { @class = "s3-1_full_textbox_name_com", @required = "required" })</div>
                <div class="field_error_msg">@Html.ValidationMessageFor(model => Model.TravellerDetails[counter].Surname, null, new { @class = "textforerrormsg" })</div>
            </div>
            <div class="clear"></div>
        </div>

        @Html.Partial("~/Views/Shared/MasterThemes/_NameGuideTooltip.cshtml")
        <div class="clear"></div>
        <!-- line end -->
        <!-- line start -->

        Func<SelectListItem, bool> dobYear = (x => true);
        object DOBHtmlAttr = null;
        object NationalityAttr = null;
        object PassportEXPDateAttr = null;
        object PassportIssueCountryAttr = new { @class = "s3-1_full_selectbox_com" };
        object PassportNumberAttr = new { @class = "s3-1_full_textbox_com" };
        MvcHtmlString DOBRequired = new MvcHtmlString("");
        MvcHtmlString InfMonth = new MvcHtmlString("");
        MvcHtmlString NationalityRequired = new MvcHtmlString("");
        MvcHtmlString PassportIssueCountryRequired = new MvcHtmlString("");
        bool hvDOBValue = Model.TravellerDetails[counter].DOB != null;
        bool hvNationalityValue = Model.TravellerDetails[counter].Nationality != null;
        bool hvPassportExpValue = Model.TravellerDetails[counter].PassportExpiryDate != null;
        bool hvPassportIssueCountryValue = Model.TravellerDetails[counter].PassportIssueCountry != null;

        if (guestType == "ADT")
        {
            dobYear = (x => Convert.ToInt32(x.Value) <= DateTime.Now.Year - 12);
            InfMonth = new MvcHtmlString("<span>Age</span>");
        }
        else if (guestType == "CNN")
        {
            DOBRequired = new MvcHtmlString("<span>*</span>");
            DOBHtmlAttr = new { data_val_required = "DOB is required for Child.", data_val = "true" };
            dobYear = (x => Convert.ToInt32(x.Value) >= DateTime.Now.Year - 12 && Convert.ToInt32(x.Value) <= DateTime.Now.Year - 2);
            InfMonth = new MvcHtmlString("<span>Age</span>");
        }
        else if (guestType == "INF")
        {
            DOBRequired = new MvcHtmlString("<span>*</span>");
            DOBHtmlAttr = new { data_val_required = "DOB is required for Infant.", data_val = "true" };
            dobYear = (x => Convert.ToInt32(x.Value) >= DateTime.Now.Year - 2 && Convert.ToInt32(x.Value) <= DateTime.Now.Year);
            InfMonth = new MvcHtmlString("<span>Age (In Months)</span>");
        }

        if (guestType == "ADT" && (isAirAsia || isGATE || isTCG || isBA || isFRFY)) 
        {
            DOBRequired = new MvcHtmlString("<span>*</span>");
            DOBHtmlAttr = new { data_val_required = "DOB is required.", data_val = "true" };
        }

        if (isAirAsia || isTCG || isFRFY)
        {
            NationalityRequired = new MvcHtmlString("<span>*</span>");
            NationalityAttr = new { data_val_required = "Nationality is required.", data_val = "true" };
        }

        if (isTCG || isFRFY)
        {
            PassportEXPDateAttr = new { data_val_required = "Passport Expiry Date is required.", data_val = "true" };
            PassportIssueCountryRequired = new MvcHtmlString("<span>*</span>");
            PassportIssueCountryAttr = new {  @class = "s3-1_full_selectbox_com", data_val_required = "Passport Issuing Country is required.", data_val = "true" };
            PassportNumberAttr = new { @class = "s3-1_full_textbox_com", data_val_required = "Passport Number is required.", data_val = "true" };
        }
        <div class="s3-1_fullform_left">
            <div class="s3-1_contactform_left">
                <div class="s3-1_cf_lable_text">
                    D.O.B @DOBRequired
                </div>
                <div class="s3-1_ff_black_border_box">
                    <div class="s3-1_dob_container">
                        <div class="s3-1_b1_lable">Day</div>
                        <div>
                            @*@Html.DropDownListFor(model => model.TravellerDetails[counter].DOBDays, Mayflower.General.Utilities.DaysDropList, "-", new { @class = "s3-1_dob day" })*@
                            @Html.DropDownListFor(model => Model.TravellerDetails[counter].DOBDays, SetSelectedItem(Mayflower.General.Utilities.DaysDropList, (hvDOBValue ? Model.TravellerDetails[counter].DOBDays.ToString() : null)), "-", new { @class = "s3-1_dob day" })
                        </div>
                    </div>
                    <div class="s3-1_dob_container">
                        <div class="s3-1_b1_lable">Month</div>
                        <div>
                            @*@Html.DropDownListFor(model => model.TravellerDetails[counter].DOBMonths, Mayflower.General.Utilities.MonthsDropList2(1), "-", new { @class = "s3-1_dob month" })*@
                            @Html.DropDownListFor(model => Model.TravellerDetails[counter].DOBMonths, SetSelectedItem(Mayflower.General.Utilities.MonthsDropList2(1), (hvDOBValue ? Model.TravellerDetails[counter].DOBMonths.ToString() : null)), "-", new { @class = "s3-1_dob month" })
                        </div>
                    </div>
                    <div class="s3-1_dob_container">
                        <div class="s3-1_b1_lable">Year</div>
                        <div>
                            @*@Html.DropDownListFor(model => model.TravellerDetails[counter].DOBYears, Mayflower.General.Utilities.DOBYearsDropList.Where(dobYear), "-", new { @class = "s3-1_dob year" })*@
                            @Html.DropDownListFor(model => Model.TravellerDetails[counter].DOBYears, SetSelectedItem(Mayflower.General.Utilities.DOBYearsDropList.Where(dobYear), (hvDOBValue ? Model.TravellerDetails[counter].DOBYears.ToString() : null)), "-", new { @class = "s3-1_dob year" })
                        </div>
                    </div>
                    @Html.Hidden(Html.NameFor(m => Model.TravellerDetails[counter].DOB).ToString(), (Model.TravellerDetails[counter].DOB.HasValue ? Model.TravellerDetails[counter].DOB.Value.ToString("yyyy/M/dd") : null), DOBHtmlAttr)
                    @*@Html.HiddenFor(model => Model.TravellerDetails[counter].DOB, DOBHtmlAttr)*@
                    <div class="clear"></div>
                </div>
                @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].DOB, null, new { @class = "textforerrormsg" })
            </div>

            <div class="s3-1_contactform_right">
                <div class="s3-1_cf_lable_text label_month">@InfMonth</div>
                @Html.TextBoxFor(model => Model.TravellerDetails[counter].Age, new { @class = "s3-1_full_textbox_com", disabled = "true" })
            </div>
            @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].Age, null, new { @class = "textforerrormsg" })

            <div class="clear"></div>
        </div>
        <div class="s3-1_fullform_right"></div>
        <div class="s3-1_fi_row1-right">
            <img src="@Url.Content("~/images/i-icon.png")" style="width: 12px; height: 12px;" alt="">
            <div class="s3-1_form_toll_tip">
                <div class="tt_top_form_y"><img src="@Url.Content("~/images/tt_top.png")" alt="" width="34" height="19"></div>
                <div class="s3-1_form_toll_tip_b">
                    <div class="s3-1_fttp_redcolor s3-1_fttp_marbot">
                        Age shown based on passenger's age on first departure date
                    </div>
                </div>
            </div>
        </div>

        <div class="clear"></div>
        <!-- line end -->
        <!-- line start -->
        <div class="s3-1_fullform_left">
            <div class="s3-1_contactform_left">
                <div class="s3-1_cf_lable_text">Nationality @NationalityRequired</div>
                <div>
                    @*@Html.DropDownListFor(model => Model.TravellerDetails[counter].Nationality, Mayflower.General.Utilities.CountryDropList(), "-", new { @class = "s3-1_full_selectbox_com" })*@
                    @Html.DropDownListFor(model => Model.TravellerDetails[counter].Nationality, SetSelectedItem(Mayflower.General.Utilities.CountryDropList(), (hvNationalityValue ? Model.TravellerDetails[counter].Nationality.ToString() : null)), "-", new { @class = "s3-1_full_selectbox_com" })
                    @Html.HiddenFor(model => Model.TravellerDetails[counter].Nationality, NationalityAttr)
                    @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].Nationality, null, new { @class = "textforerrormsg" })
                </div>
            </div>
            <div class="s3-1_contactform_right switch-able" id="passpno_@counter">
                <div class="passport-field">
                    <div class="s3-1_cf_lable_text">
                        Passport Number @if (isGATE || isTCG || isFRFY)
                        {<span>*</span>}
                    </div>
                    @*@Html.TextBoxFor(model => model.TravellerDetails[counter].PassportNumber, new { @class = "s3-1_full_textbox_com", @required = "required" })*@
                    @*Insurance not yet go live - hidden passport required*@
                    @Html.TextBoxFor(model => Model.TravellerDetails[counter].PassportNumber, PassportNumberAttr)
                    @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].PassportNumber, null, new { @class = "textforerrormsg" })
                </div>
            </div>
            <div class="clear"></div>
        </div>
        <div class="clear"></div>
        <!-- line end -->
        <!-- line start -->
        <div class="s3-1_fullform_left passport-field">
            <div class="s3-1_contactform_left" id="passpexp_@counter">
                <div class="s3-1_cf_lable_text">
                    Passport Expiry date @if (isGATE || isTCG || isFRFY)
                    {<span>*</span>}
                </div>
                <div class="s3-1_ff_black_border_box">
                    <div class="s3-1_dob_container">
                        <div class="s3-1_b1_lable">Day</div>
                        <div>
                            @*@Html.DropDownListFor(model => model.TravellerDetails[counter].PassportExpiryDateDays, Mayflower.General.Utilities.DaysDropList, "-", new { @class = "s3-1_dob day" })*@
                            @Html.DropDownListFor(model => Model.TravellerDetails[counter].PassportExpiryDateDays, SetSelectedItem(Mayflower.General.Utilities.DaysDropList, (hvPassportExpValue ? Model.TravellerDetails[counter].PassportExpiryDateDays.ToString() : null)), "-", new { @class = "s3-1_dob day" })
                        </div>
                    </div>
                    <div class="s3-1_dob_container">
                        <div class="s3-1_b1_lable">Month</div>
                        <div>
                            @*@Html.DropDownListFor(model => model.TravellerDetails[counter].PassportExpiryDateMonths, Mayflower.General.Utilities.MonthsDropList2(1), "-", new { @class = "s3-1_dob month" })*@
                            @Html.DropDownListFor(model => Model.TravellerDetails[counter].PassportExpiryDateMonths, SetSelectedItem(Mayflower.General.Utilities.MonthsDropList2(1), (hvPassportExpValue ? Model.TravellerDetails[counter].PassportExpiryDateMonths.ToString() : null)), "-", new { @class = "s3-1_dob month" })
                        </div>
                    </div>
                    <div class="s3-1_dob_container">
                        <div class="s3-1_b1_lable">Year</div>
                        <div>
                            @*@Html.DropDownListFor(model => model.TravellerDetails[counter].PassportExpiryDateYears, Mayflower.General.Utilities.ExpiredYearsDropList(6), "-", new { @class = "s3-1_dob year" })*@
                            @Html.DropDownListFor(model => Model.TravellerDetails[counter].PassportExpiryDateYears, SetSelectedItem(Mayflower.General.Utilities.ExpiredYearsDropList(15), (hvPassportExpValue ? Model.TravellerDetails[counter].PassportExpiryDateYears.ToString() : null)), "-", new { @class = "s3-1_dob year" })
                        </div>
                    </div>
                    @Html.Hidden(Html.NameFor(m => Model.TravellerDetails[counter].PassportExpiryDate).ToString(), (Model.TravellerDetails[counter].PassportExpiryDate.HasValue ? Model.TravellerDetails[counter].PassportExpiryDate.Value.ToString("yyyy/M/dd") : null), PassportEXPDateAttr)
                    @*@Html.HiddenFor(model => model.TravellerDetails[counter].PassportExpiryDate, new { })*@
                    <div class="clear"></div>
                </div>
                @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].PassportExpiryDate, null, new { @class = "textforerrormsg" })
                @*@Html.ValidationMessageFor(model => Model.TravellerDetails[counter].DOB, null, new { @class = "textforerrormsg" })*@
            </div>
            <div class="s3-1_contactform_right" id="passpcountry_@counter">
                <div class="s3-1_cf_lable_text">Passport Issuing country @PassportIssueCountryRequired</div> 
                <div>
                    @*@Html.DropDownListFor(model => model.TravellerDetails[counter].PassportIssueCountry, Mayflower.General.Utilities.CountryDropList(), "-", new { @class = "s3-1_full_selectbox_com" })*@
                    @Html.DropDownListFor(model => Model.TravellerDetails[counter].PassportIssueCountry, SetSelectedItem(Mayflower.General.Utilities.CountryDropList(), (hvPassportIssueCountryValue ? Model.TravellerDetails[counter].PassportIssueCountry.ToString() : null)), "-", PassportIssueCountryAttr)
                    @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].PassportIssueCountry, null, new { @class = "textforerrormsg" })
                </div>
            </div>
            <div class="clear"></div>
        </div>
        <div class="s3-1_fullform_right"></div>
        <div class="clear"></div>
        <!-- line end -->

if (Core.IsForStaging)
{
    var FFNo = Model.TravellerDetails[counter].FrequrntFlyerNoAirline;
    var FFImgUrl = FFNo == null ? null : Url.Content(UtilitiesService.getFrequrntFlyerImgUrl(FFNo));
    var airlineType = Model.FlightInfo.FlightDetailInfo.Airline.FirstOrDefault();

    var fFErrorMessageID = "FFError_" + counter.ToString();

            <!-- line start -->
            <div class="s3-1_fullform_left">
                <div class="s3-1_contactform_left">
                    @*20161230 - Hide in Phase 1*@
                    <div class="s3-1_cf_lable_text">Frequent Traveller Number</div>
                    <div class="ffn_inputbox">
                        <div class="s3-1_flyer_left_dupinput" data-ffair="ffair_@counter" id="ffairID_@counter" data-airlinetype="@airlineType">
                            @if (FFNo != null)
                            {
                                <img src='@FFImgUrl' style='height:30px;width:30px;' />
                                <span> @FFNo</span>
                            }
                            else
                            {
                                <span style="font-size: 14px;padding-left: 14px;">-</span> @*need?*@
                            }

                        </div>
                        @Html.HiddenFor(model => Model.TravellerDetails[counter].FrequrntFlyerNoAirline, new { @class = "s3-1_flyer_right" })

                        @*<input name="@Model.TravellerDetails[counter].FrequrntFlyerNoAirline" type="hidden" value="" id="frquentflyer">*@

                        @if (Model.TravellerDetails[counter].FrequentFlyerNo != null)
                        {
                            @Html.TextBoxFor(model => Model.TravellerDetails[counter].FrequentFlyerNo, new { @class = "s3-1_flyer_right ff_no", data_val_regex = "Please use only letters (A-Z, a-z, 0-9).", data_val_regex_pattern = "^[a-zA-Z0-9]*$", data_val = "true" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => Model.TravellerDetails[counter].FrequentFlyerNo, new { @class = "s3-1_flyer_right ff_no", disabled = "true", data_val_regex = "Please use only letters (A-Z, a-z, 0-9).", data_val_regex_pattern = "^[a-zA-Z0-9]*$", data_val = "true" })
                        }

                        <div class="clear"></div>
                        <div class="field_error_msg">
                            @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].FrequentFlyerNo, null, new { @class = "textforerrormsg", id = @fFErrorMessageID })
                        </div>
                        <div class="ffn_inputboxulli_container ffn_select">
                            @*<div class="ffn_inputboxulli_container">
                                <ul id="ffair_@counter">
                                    @foreach (var airline in airlines)
                                    {
                                        string airlineName = airline.airline;
                                        string airlineImagePath = airline.ImagePath;
                                        string airlineCode = airline.code;
                                        <li inpvalue="@airlineCode" class="add-cursor-pointer">
                                            <div class="ffn_ulli_left"><img src="@Url.Content(airlineImagePath)" width="34" height="39" alt=""></div>
                                            <div class="ffn_ulli_right">@airlineCode - @airlineName</div>
                                            <div class="clear"></div>
                                        </li>
                                    }
                                </ul>
                                </div>*@
                        </div>
                    </div>
                </div>
            </div>
}


    <div class="s3-1_contactform_right @(Model.SearchFlightInfo.isDomesticFlight ? " gd-domestic-mobile " : "")" id="icno_@counter">
        @if (Model.SearchFlightInfo.isDomesticFlight)
        {
            <div class="nric-field">
                <div class="s3-1_cf_lable_text">NRIC number</div>
                <div>@Html.TextBoxFor(model => Model.TravellerDetails[counter].IdentityNumber, new { @class = "s3-1_full_textbox_com" })</div>
                @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].IdentityNumber, null, new { @class = "textforerrormsg" })
            </div>
        }
    </div>
    <div class="clear"></div>
    <div class="s3-1_fullform_right"></div>
        <!-- line end -->
        <!-- line start -->
if (customPrincipal.IsAgent)
{
    var customizedfield1 = ViewData["CUSTOMIZEDFIELD1"] != null ? ViewData["CUSTOMIZEDFIELD1"].ToString() : null;
    var customizedfield2 = ViewData["CUSTOMIZEDFIELD2"] != null ? ViewData["CUSTOMIZEDFIELD2"].ToString() : null;
    var customizedfield3 = ViewData["CUSTOMIZEDFIELD3"] != null ? ViewData["CUSTOMIZEDFIELD3"].ToString() : null;
    var customizedfield4 = ViewData["CUSTOMIZEDFIELD4"] != null ? ViewData["CUSTOMIZEDFIELD4"].ToString() : null;

        <div class="s3-1_fullform_left">
            @if (customizedfield1 != null)
            {
            <div class="s3-1_contactform_left">
                <div class="s3-1_cf_lable_text">@customizedfield1<span>*</span></div>
                <div>@Html.TextBoxFor(model => Model.TravellerDetails[counter].CustomizedField1, new { @class = "s3-1_full_textbox_com", @required = "required" })</div>
                @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].CustomizedField1, null, new { @class = "textforerrormsg" })
            </div>
            }
            @if (customizedfield2 != null)
            {
            <div class="s3-1_contactform_right">
                <div class="s3-1_cf_lable_text">@customizedfield2<span>*</span></div>
                <div>@Html.TextBoxFor(model => Model.TravellerDetails[counter].CustomizedField2, new { @class = "s3-1_full_textbox_com", @required = "required" })</div>
                @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].CustomizedField2, null, new { @class = "textforerrormsg" })
            </div>
            }
        </div>
        <div class="clear"></div>
        <!-- line end -->
        <!-- line start -->

        <div class="s3-1_fullform_left">
            @if (customizedfield3 != null)
            {
            <div class="s3-1_contactform_left">
                <div class="s3-1_cf_lable_text">@customizedfield3<span>*</span></div>
                <div>@Html.TextBoxFor(model => Model.TravellerDetails[counter].CustomizedField3, new { @class = "s3-1_full_textbox_com", @required = "required" })</div>
                @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].CustomizedField3, null, new { @class = "textforerrormsg" })
            </div>
            }
            @if (customizedfield4 != null)
            {
            <div class="s3-1_contactform_right">
                <div class="s3-1_cf_lable_text">@customizedfield4<span>*</span></div>
                <div>@Html.TextBoxFor(model => Model.TravellerDetails[counter].CustomizedField4, new { @class = "s3-1_full_textbox_com", @required = "required" })</div>
                @Html.ValidationMessageFor(model => Model.TravellerDetails[counter].CustomizedField4, null, new { @class = "textforerrormsg" })
            </div>
            }
        </div>
        <div class="clear"></div>
}

            if ((Model.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.AirAsia
            || Model.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.TCG
            || Model.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.Firefly)
            && gotSSR && guestType != "INF" && Model.FlightInfo.FlightDetailInfo.FlightTrip.All(x => x.FlightRouteInfo.Count <= 1)) //Disable SSR for connecting flight at the moment
            {
                var ssrList = Model.FlightInfo.AvaSSR;

                <div class="full_line"></div>
                <div class="special_request_box">Special Request</div>

                <div class="s3-1_special_request">
                    @{
                        int outBoundIndex = 0;
                        int inBoundIndex = 0;
                    }
                    @foreach (FlightSSR ssrType in Enum.GetValues(typeof(FlightSSR)))
                    {
                        string defaultSelectDesc = string.Empty;
                        string ssrLogo = string.Empty;

                        switch (ssrType)
                        {
                            case FlightSSR.Baggage:
                                defaultSelectDesc = "No Checked Baggage";
                                ssrLogo = Url.Content("~/Images/ico/gt.png");
                                break;
                            case FlightSSR.Meal:
                                defaultSelectDesc = "No Checked Meal";
                                ssrLogo = Url.Content("~/Images/ico/ml.png");
                                break;
                            default:
                                defaultSelectDesc = "No Checked Special Request";
                                break;
                        }

                        <div class="ssr_label clear"><img class="btn-loadstate" src="@ssrLogo" style="width: 35px;margin-right: 5px;vertical-align: middle;">@ssrType.ToDescription()</div>
                        @*<div class="s3-1_fi_flying_icon">
                                <checkbox>Same With Return Flight</checkbox>
                                @Html.StyledCheckBoxFor(model => model.ImFlying, "Same With Return Flight", "checkbox2")
                            </div>*@
                        <div class="s3-1_halfform_left">
                            <div class="s3-1_cf_lable_text">Depart</div>
                            @{ var ssrTypeGroup = ssrList.FirstOrDefault(x => x.IsOutboundFlightSSR)?.SSRTypeGroup?.FirstOrDefault(x => x.Key == ssrType); }
                            @if (ssrTypeGroup != null)
                            {
                                foreach (var seg in ssrTypeGroup?.Value)
                                {
                                    bool disabledDropDown = outBoundIndex != 0 && ssrType == FlightSSR.Baggage;
                                    string className = "s3-1_full_selectbox_com " + ssrType + (disabledDropDown ? " remove_background_pic" : "");
                                    <div class="s3-1_contactform_left_lb">
                                        <div class="s3-1_cf_lable_text">@seg.StationLabel</div>
                                        <div>
                                            @Html.DropDownListFor(model => Model.TravellerDetails[counter].OutBoundSSR[outBoundIndex].SSRCode,
                                                                                                                                 Model.TravellerDetails[counter].OutBoundSSR != null ? SetSelectedItem(UtilitiesService.GetBaggageList(seg.SSR.ToList()), Model.TravellerDetails[counter].OutBoundSSR[outBoundIndex]?.SSRCode) : UtilitiesService.GetBaggageList(seg.SSR.ToList())
                                                                                                                                 , defaultSelectDesc, disabledDropDown ? new { @class = className, @readonly = "readonly" } : new { @class = className } as object)
                                            @Html.HiddenFor(model => Model.TravellerDetails[counter].OutBoundSSR[outBoundIndex].DepartureStation, new { @Value = seg.DepartureStation })
                                            @Html.HiddenFor(model => Model.TravellerDetails[counter].OutBoundSSR[outBoundIndex].ArrivalStation, new { @Value = seg.ArrivalStation })
                                            @Html.HiddenFor(model => Model.TravellerDetails[counter].OutBoundSSR[outBoundIndex].SSRType, new { @Value = ssrType })
                                        </div>
                                    </div>
                                    <div class="clear"></div>
                                    outBoundIndex++;
                                }
                            }
                        </div>

                        if (isReturn)
                        {
                            <div class="s3-1_halfform_right">
                                <div class="s3-1_cf_lable_text">Return</div>

                                @{ ssrTypeGroup = ssrList.FirstOrDefault(x => !x.IsOutboundFlightSSR)?.SSRTypeGroup.FirstOrDefault(x => x.Key == ssrType); }
                                @if (ssrTypeGroup != null)
                                {
                                    foreach (var seg in ssrTypeGroup?.Value)
                                    {
                                        bool disabledDropDown = inBoundIndex != 0 && ssrType == FlightSSR.Baggage;
                                        string className = "s3-1_full_selectbox_com " + ssrType + (disabledDropDown ? " remove_background_pic" : "");
                                        <div class="s3-1_contactform_right_lb">
                                            <div class="s3-1_cf_lable_text">@seg.StationLabel</div>
                                            <div>
                                                @Html.DropDownListFor(model => Model.TravellerDetails[counter].InBoundSSR[inBoundIndex].SSRCode,
                                                                                                                                     Model.TravellerDetails[counter].InBoundSSR != null ? SetSelectedItem(UtilitiesService.GetBaggageList(seg.SSR.ToList()), Model.TravellerDetails[counter].InBoundSSR[inBoundIndex]?.SSRCode) : UtilitiesService.GetBaggageList(seg.SSR.ToList())
                                                                                                                                     , defaultSelectDesc, disabledDropDown ? new { @class = className, @readonly = "readonly", } : new { @class = className } as object)
                                                @Html.HiddenFor(model => Model.TravellerDetails[counter].InBoundSSR[inBoundIndex].DepartureStation, new { @Value = seg.DepartureStation })
                                                @Html.HiddenFor(model => Model.TravellerDetails[counter].InBoundSSR[inBoundIndex].ArrivalStation, new { @Value = seg.ArrivalStation })
                                                @Html.HiddenFor(model => Model.TravellerDetails[counter].InBoundSSR[inBoundIndex].SSRType, new { @Value = ssrType })
                                            </div>
                                        </div>
                                        <div class="clear"></div>
                                        inBoundIndex++;
                                    }
                                }
                            </div>
                            <div class="clear"></div>
                        }
                    }
                </div>
            }
}

@helper HotelSRForm(string guestValue, int counter, int totalGuest, string guestType, ProductFlight Model, IEnumerable<SelectListItem> roomDropDown, List<DisplaySpecialRequestModel> RoomBedList)
    {
        <!-- special request of hotel start -->
        <div id="hotelSR_@counter">
            <div class="s3-1_fullform_left">
                <div class="s3_lineforform"></div>
            </div>
            <div class="clear"></div>
            <div class="s3-1_fi_flying_icon">
                @Html.StyledCheckBoxFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.ImStaying, "I'm Staying - ", "checkbox5")
                @Html.DropDownListFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.RoomType, roomDropDown, new { @class = "s3-1_title roomChoise" })
                @Html.HiddenFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.IsAssign, false)
            </div>
            <div class="sp_request_text">Special Request **</div>
            <div class="s3_hotel_sp_left">Smoking</div>
            <div class="s3_hotel_sp_right">
                @Html.RadioButtonFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.SmokingPreferences, "Smoking", new { id = "smoking_" + counter })<label for="@("smoking_" + counter)">Smoking</label>
                @Html.RadioButtonFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.SmokingPreferences, "NonSmoking", new { id = "nosmoking_" + counter })<label for="@("nosmoking_" + counter)">No-Smoking</label>
                @Html.RadioButtonFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.SmokingPreferences, "Either", new { id = "eithersmoke_" + counter })<label for="@("eithersmoke_" + counter)" class="rad">No Preference</label>
            </div>
            <div class="clear"></div>

            @if (RoomBedList != null && RoomBedList.Any(x => x.BeddingRequest.Count > 1))
            {
                int i = 0;
                foreach (var room in RoomBedList.Where(x => x != null))
                {
                    var ishidden = i == 0 ? "" : "hidden";
                    var roomno = "room_" + i;
                    <div data-room="@room.RoomTypeCode" class="roomsrdiv_@counter @roomno @ishidden">
                        <div class="s3_hotel_sp_left">Bedding request</div>
                        <div class="s3_hotel_sp_right">
                            @foreach (var bed in room.BeddingRequest)
                            {
                                @Html.RadioButtonFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.BetTypeID, bed.BetTypeID, false)
                                <label for="@(bed.BedName + "_" + counter)">@bed.BedName</label>
                            }
                        </div>
                        <div class="clear"></div>
                    </div>
                    i++;
                }

            }

            <div class="s3_hotel_sp_left">Check In</div>
            <div class="s3_hotel_sp_right">
                @Html.RadioButtonFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.CheckInMode, "Early", new { id = "checkinearly_" + counter })<label for="@("checkinearly_" + counter)">Early</label>
                @Html.RadioButtonFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.CheckInMode, "Late", new { id = "checkinlate_" + counter })<label for="@("checkinlate_" + counter)">Late</label>
                @Html.RadioButtonFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.CheckInMode, "Either", new { id = "checkineither_" + counter })<label for="@("checkineither_" + counter)">No Preference</label>
            </div>
            <div class="clear"></div>

            <div class="s3_hotel_addi_txtboxlable">Additional Request<small>***</small></div>
            <div>
                @* 2017/01/31 - Heng changed Remark,
                    ExpediaHotelsServiceCall.cs grab GuestRoomModel.Additional Request instead of SpecialRequest.AdditionalRequest *@
                @Html.TextAreaFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.AdditionalRequest, new { @class = "adr_txtbox", maxlength = "230" })
                <div class="field_error_msg">@Html.ValidationMessageFor(model => Model.TravellerDetails[counter].HotelSpecialRequest.AdditionalRequest, null)</div>
            </div>

            <div class="impred_information">** &nbsp; Special request is subject to availability.</div>
            <div class="impred_information" style="margin-top: -15px">*** Additional Request max with 230 characters only.</div>
        </div>
        <!-- special request of hotel end -->
}
