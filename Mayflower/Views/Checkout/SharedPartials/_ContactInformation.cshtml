@model Alphareds.Module.Model.CheckoutProduct
@using Alphareds.Module.ServiceCall;
@using Alphareds.Module.Common;
@using Alphareds.Module.Model;

@{
    var contactInfo = Model.ContactPerson;
    bool hasContactInfo = contactInfo != null && !string.IsNullOrWhiteSpace(contactInfo.GivenName);
    DateTime contactDOB = DateTime.MaxValue;
    List<string> nameList = new List<string>();
    string phoneNum = null;
    string phoneNum2 = null;

    if (hasContactInfo && contactInfo.DOB.HasValue)
    {
        contactDOB = contactInfo.DOB.Value;
    }

    if (hasContactInfo)
    {
        nameList.Add(contactInfo.GivenName);
        nameList.Add(contactInfo.Surname);
        phoneNum = contactInfo.Phone1LocationCode != null ? "(" + UtilitiesService.GetPhoneCode(contactInfo.Phone1LocationCode) + ")" : "-";
        phoneNum2 = contactInfo.Phone2LocationCode != null ? "(" + UtilitiesService.GetPhoneCode(contactInfo.Phone2LocationCode) + ")" : "-";
    }
}

@if (hasContactInfo)
{
    <div class="s3_hotel_topline lineblack" style="margin-top: 2em;"></div>
    <div class="s4_payment_heading guest">Contact Details</div>
    <div class="s3_hotel_contacts_box">
        <!-- PERSONAL DETAIL START -->
        <div class="pd_containerbox">
            <div class="pdcont_nameleft">
                @{ string fLetters = "";
                    foreach (var part in string.Join(" ", nameList).Split(' '))
                    {
                        if (part.Any(x => x != ' ' && fLetters.Length <= 2))
                        {
                            fLetters += part.First();
                        }
                    }
                }
                <div class="mpjm_pd_heading_left mpjm_spclclass_mt" style="margin-top: 12px;">@fLetters.ToUpper()</div>
                <div class="clear"></div>
            </div>
            <div class="pdcont_nameright">
                <div class="s4_guest_tabs_name_container">
                    <h3>@contactInfo.Title @contactInfo.GivenName.ToUpper() @contactInfo.Surname.ToUpper()</h3>
                    <h4>Email: <span>@contactInfo.Email</span></h4>
                </div>
                <div class="mpjm_halfdiv">
                    <div class="mpjmhd_lable spcl_bigfont">Primary Phone Number</div>
                    <div class="mpjmhd_ans spcl_bigfont1">@phoneNum @contactInfo.Phone1</div>
                </div>
                <div class="mpjm_halfdiv">
                    <div class="mpjmhd_lable spcl_bigfont">Secondary Phone Number</div>
                    <div class="mpjmhd_ans spcl_bigfont1">@phoneNum2 @contactInfo.Phone2</div>
                </div>
            </div>
            <div class="clear"></div>
        </div>
        <!-- PERSONAL DETAIL END -->
    </div>
}

<div class="s3_hotel_topline lineblack" style="margin-top: 2em;"></div>
<div class="s4_payment_heading guest">Guest Details</div>
<div>
    <div class="payment_graytab_container mt20">
        @if (Model.Flight == null && Model.Hotel != null)
        {
            var grp = Model.Hotel.RoomDetails.GroupBy(x => new { x.RoomTypeName });
            int roomCounter = 1;
            foreach (var grpRoom in grp.OrderByDescending(x => x.Count()))
            {

                <div class="pasengerTypeInfo">
                    <div class="payment_gray_tabs">
                        <div class="pgt_left">@grpRoom.Key.RoomTypeName x @grpRoom.Count()</div>
                        <div class="pgt_right">&nbsp;</div>
                        <div class="clear"></div>
                    </div>
                    <!-- row start -->
                    @foreach (var room in grpRoom)
                    {
                        string[] name = new[] { room.GivenName, room.Surname };
                        string joinName = string.Join(" ", name).ToUpper();

                        DateTime roomDOB = DateTime.MaxValue;
                        if (room.DateOfBirth.Year > 0 && room.DateOfBirth.Month > 0 && room.DateOfBirth.Day > 0)
                        {
                            roomDOB = new DateTime(room.DateOfBirth.Year, room.DateOfBirth.Month, room.DateOfBirth.Day);
                        }

                        string fLetters = "";
                        foreach (var part in joinName.Split(' '))
                        {
                            if (part.Any(x => x != ' ' && fLetters.Length <= 2))
                            {
                                fLetters += part.First();
                            }
                        }

                        <div class="payment_fulldetail_container">
                            <div class="s4_blue_top_pati">Room @roomCounter</div>
                            <!-- PERSONAL DETAIL START -->
                            <div class="pd_containerbox">
                                <div class="pdcont_nameleft">
                                    <div class="mpjm_pd_heading_left mpjm_spclclass_mt">@fLetters.ToUpper()</div>
                                    <div class="clear"></div>
                                </div>

                                <div class="pdcont_nameright">
                                    <div class="s4_guest_tabs_name_container">
                                        <h3>@room.Title @joinName</h3>
                                        <h4>Date of birth: <span>@(roomDOB == DateTime.MaxValue ? "-" : roomDOB.ToString("dd MMM yyyy"))</span></h4>
                                    </div>
                                    <div class="mpjmhd_ans spcl_bigfont1" style="font-size: 20px;">Special Request (subject to availability)</div>

                                    @if (room.SpecialRequest != null)
                                    {
                                        string bedDesc = "", imagePath = "";
                                        string betXMLPath = System.Web.Hosting.HostingEnvironment.MapPath("~/App_Data/Hotel_BetTypes.xml");
                                        ExpediaHotelsServiceCall.GetImagesFromXML(betXMLPath, SearchImageColumn.ID, (room.SpecialRequest.BetTypeID ?? "-"), ref bedDesc, ref imagePath);

                                        <div class="mpjm_halfdiv">
                                            <div class="mpjmhd_lable spcl_bigfont">Smoking Room</div>
                                            <div class="mpjmhd_ans spcl_bigfont1">@(room.SpecialRequest.SmokingPreferences.ToString())</div>
                                        </div>

                                        <div class="mpjm_halfdiv">
                                            <div class="mpjmhd_lable spcl_bigfont">Bedding Request</div>
                                            <div class="mpjmhd_ans spcl_bigfont1">@(string.IsNullOrWhiteSpace(bedDesc) ? "-" : bedDesc)</div>
                                        </div>

                                        <div class="mpjm_halfdiv">
                                            <div class="mpjmhd_lable spcl_bigfont">Check in</div>
                                            <div class="mpjmhd_ans spcl_bigfont1">@(room.CheckInMode.ToString())</div>
                                        </div>

                                        <div class="mpjm_halfdiv">
                                            <div class="mpjmhd_lable spcl_bigfont">Additional Request</div>
                                            <div class="mpjmhd_ans spcl_bigfont1">@(room.AdditionalRequest ?? "-")</div>
                                        </div>
                                    }


                                    <div class="clear"></div>

                                </div>
                                <div class="clear"></div>
                            </div>
                            <!-- PERSONAL DETAIL END -->
                        </div>
                        roomCounter++;
                    }
                    <!-- row end -->
                </div>
            }
        }
        else
        {
            //Guest detail of flight
            Alphareds.Module.SabreWebService.SWS.OriginDestinationOption[] odoList = Model.Flight.FlightInfo.SupplierFlightInfo.OriginDestinationOptions;
            Alphareds.Module.SabreWebService.SWS.AirItineraryPricingInfo pricingInfo = Model.Flight.FlightInfo.SupplierFlightInfo.PricingInfo;
            int pTypeCounter = 0;
            bool isSabre = Model.Flight.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.SACS;
            bool isAirAsia = Model.Flight.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.AirAsia;
            //bool isGATEChn = Model.Flight.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.GATE_Chn;
            //bool isGATEInt = Model.Flight.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.GATE_Int;
            //bool isTCG = Model.Flight.FlightInfo.Supplier == Alphareds.Module.CompareToolWebService.CTWS.serviceSource.TCG;

            bool isReturn = Model.Flight.SearchFlightInfo.TripType == "Return";

            foreach (var item in Model.Flight.PricingDetail.Items)
            {
                <div class="pasengerTypeInfo">
                    <div class="payment_gray_tabs">
                        @{
                            List<Alphareds.Module.Model.TravellerDetail> passengerList = Model.Flight.TravellerDetails.Where(x => x.PassengerType == item.ItemDetail).ToList();
                            for (int i = 0; i < passengerList.Count; i++)
                            {
                                <div class="pgt_left">@passengerList[i].Title @passengerList[i].GivenName.ToUpper() @passengerList[i].Surname.ToUpper()</div>
                                if (i == 0)
                                {
                                    <div class="pgt_right">&nbsp;</div>
                                }
                                <br />
                                <div class="clear"></div>
                            }
                        }
                        <div class="clear"></div>
                    </div>
                    <!-- row start -->
                    @for (int i = 0; i < Model.Flight.TravellerDetails.Where(x => x.PassengerType == item.ItemDetail).ToList().Count; i++)
                    {
                        var iPassengerInfo = Model.Flight.TravellerDetails.Where(x => x.PassengerType == item.ItemDetail).ToList()[i];

                        <div class="payment_fulldetail_container">
                            <div class="s4_blue_top_pati">Guest @(i + 1)</div>
                            <!-- PERSONAL DETAIL START -->
                            <div class="pd_containerbox">
                                <div class="pdcont_nameleft cust-detail" style="margin-top: 12px;">
                                    @{ string firstLetters = "";
                                        foreach (var part in iPassengerInfo.GivenName.Split(' '))
                                        {
                                            if (part.Any(x => x != ' ' && firstLetters.Length != 2))
                                            {
                                                firstLetters += part.First();
                                            }
                                        }
                                    }
                                    <div class="mpjm_pd_heading_left mpjm_spclclass_mt">@firstLetters.ToUpper()</div>
                                    <div class="clear"></div>
                                </div>



                                <div class="pdcont_nameright">
                                    <div class="s4_guest_tabs_name_container">
                                        <h3>@iPassengerInfo.Title @iPassengerInfo.GivenName.ToUpper() @iPassengerInfo.Surname.ToUpper()</h3>
                                        @*@{
                                                DateTime iPassengerDOB = DateTime.MinValue;
                                                DateTime.TryParse(iPassengerInfo.DOB, out iPassengerDOB);
                                            }*@
                                        <h4>Date of birth: <span>@(iPassengerInfo.DOB != DateTime.MinValue && iPassengerInfo.DOB != null ? iPassengerInfo.DOB.Value.ToString("dd MMM yyyy") : " - ")</span></h4>
                                    </div>
                                    <div class="mpjm_halfdiv">
                                        <div class="mpjmhd_lable spcl_bigfont">Age @(iPassengerInfo.PassengerType == "INF" ? "(In Months)" : "")</div>
                                        <div class="mpjmhd_ans spcl_bigfont1">@(iPassengerInfo.Age != null && iPassengerInfo.Age != 0.0 ? (iPassengerInfo.Age + (iPassengerInfo.PassengerType == "INF" ? " Months" : " Years old")) : "-")</div>
                                    </div>
                                    <div class="mpjm_halfdiv">
                                        <div class="mpjmhd_lable spcl_bigfont">Nationality</div>
                                        <div class="mpjmhd_ans spcl_bigfont1">@(!string.IsNullOrWhiteSpace(iPassengerInfo.Nationality) ? UtilitiesService.GetCountryName(iPassengerInfo.Nationality) : "-")</div>
                                    </div>
                                    @if (!Model.Flight.SearchFlightInfo.isDomesticFlight || iPassengerInfo.Nationality != "MYS")
                                    {
                                        <div class="mpjm_halfdiv">
                                            <div class="mpjmhd_lable spcl_bigfont">Passport Number</div>
                                            <div class="mpjmhd_ans spcl_bigfont1">@(string.IsNullOrWhiteSpace(iPassengerInfo.PassportNumber) ? "-" : iPassengerInfo.PassportNumber)</div>
                                        </div>
                                        <div class="clear"></div>

                                            <div class="mpjm_halfdiv">
                                                <div class="mpjmhd_lable spcl_bigfont">Passport Expiry Date</div>
                                                <div class="mpjmhd_ans spcl_bigfont1">@((iPassengerInfo.PassportExpiryDate != null ? iPassengerInfo.PassportExpiryDate.Value.ToString("dd MMM yyyy") : "-"))</div>
                                            </div>
                                            <div class="mpjm_halfdiv">
                                                <div class="mpjmhd_lable spcl_bigfont">Passport Issuing Country</div>
                                                <div class="mpjmhd_ans spcl_bigfont1">@(!string.IsNullOrWhiteSpace(iPassengerInfo.PassportIssueCountry) ? UtilitiesService.GetCountryName(iPassengerInfo.PassportIssueCountry) : "-") </div>
                                            </div>
                                            <div class="mpjm_halfdiv">
                                                <div class="mpjmhd_lable spcl_bigfont">Frequent Traveller Number</div>
                                                <div class="mpjmhd_ans spcl_bigfont1">@((iPassengerInfo.FrequrntFlyerNoAirline != null ? iPassengerInfo.FrequrntFlyerNoAirline + (iPassengerInfo.FrequentFlyerNo != null ? "-"+ iPassengerInfo.FrequentFlyerNo : ""): "-"))</div>
                                            </div>
                                            <div class="clear"></div>
                                        }

                                    @if (Model.Flight.SearchFlightInfo.isDomesticFlight && iPassengerInfo.Nationality == "MYS")
                                    {
                                        <div class="mpjm_halfdiv">
                                            <div class="mpjmhd_lable spcl_bigfont">NRIC Number</div>
                                            <div class="mpjmhd_ans spcl_bigfont1">@(iPassengerInfo.IdentityNumber ?? "-")</div>
                                        </div>
                                    }


                                    <div class="clear"></div>
                                    @if (isSabre)
                                    {
                                        <div class="mpjm_halfdiv">
                                            <div class="mpjmhd_lable spcl_bigfont">Meal</div>
                                            <div class="mpjmhd_ans spcl_bigfont1">
                                                @for (int a = 0; a < odoList.Length; a++)
                                                {
                                                    int mealIndex = 0;
                                                    for (int b = 0; b < odoList[a].FlightSegments.Length; b++)
                                                    {
                                                        string mealCode = pricingInfo.FareBreakDown[pTypeCounter].FareInfos[mealIndex].MealCode;
                                                        <span>@odoList[a].FlightSegments[b].DepartureAirportLocationCode > @odoList[a].FlightSegments[b].ArrivalAirportLocationCode</span><br />
                                                        if (string.IsNullOrWhiteSpace(mealCode))
                                                        {
                                                            <span>Meal not Included</span>
                                                        }
                                                        else
                                                        {
                                                            <span>Meal Included</span>
                                                        }
                                                        <br />

                                                        mealIndex++;
                                                    }
                                                }
                                            </div>
                                        </div>
                                        <div class="mpjm_halfdiv">
                                            <div class="mpjmhd_lable spcl_bigfont">Baggage Allowed</div>
                                            <div class="mpjmhd_ans spcl_bigfont1">
                                                @for (int a = 0; a < odoList.Length; a++)
                                                {
                                                    <span>
                                                        @getFlightSegmentRoute(odoList[a].FlightSegments)
                                                    </span>
                                                    <br />
                                                    if (pricingInfo.FareBreakDown[pTypeCounter].BaggageInfos.Length > 0 &&
                                                    (pricingInfo.FareBreakDown[pTypeCounter].BaggageInfos[a].BaggageWeight > 0 ||
                                                    pricingInfo.FareBreakDown[pTypeCounter].BaggageInfos[a].BaggagePieces > 0))
                                                    {
                                                        Alphareds.Module.SabreWebService.SWS.BaggageInformation baggage = pricingInfo.FareBreakDown[pTypeCounter].BaggageInfos[a];
                                                        if (baggage.BaggagePieces > 0 && baggage.BaggageWeight == 0)
                                                        {
                                                            <span>Free Baggage (@baggage.BaggagePieces x 15kg)</span>
                                                        }
                                                        else
                                                        {
                                                            <span>Free Baggage (@baggage.BaggageWeight @baggage.BaggageWeightUnit)</span>
                                                        }

                                                    }
                                                    else
                                                    {
                                                        <span>No Free Baggage</span>
                                                    }
                                                    <br />
                                                }
                                            </div>
                                        </div>
                                    }
                                    else if (isAirAsia && iPassengerInfo.PassengerType != "INF")
                                    {
                                        <h3>Special Request</h3>
                                        for (int a = 0; a < (isReturn ? 2 : 1); a++)
                                        {
                                            bool isReturnFlight = a != 0;
                                            var ssrs = iPassengerInfo.CheckOutSSR.Where(x => (isReturnFlight ? !x.IsOutBoundSSR : x.IsOutBoundSSR) && x.TravellerSSR.Any(y => !string.IsNullOrEmpty(y.SSRCode)));

                                            <div class="mpjm_halfdiv">
                                                @if (ssrs != null)
                                                {
                                                    foreach (FlightSSR ssrType in Enum.GetValues(typeof(FlightSSR)))
                                                    {
                                                        string ssrLabel = string.Empty;

                                                        switch (ssrType)
                                                        {
                                                            case FlightSSR.Baggage:
                                                                ssrLabel = isReturnFlight ? "Return Baggage" : "Depart Baggage";
                                                                break;
                                                            case FlightSSR.Meal:
                                                                ssrLabel = isReturnFlight ? "Return Meal" : "Depart Meal";
                                                                break;
                                                            default:
                                                                break;
                                                        }

                                                        <div class="mpjmhd_lable spcl_bigfont">@ssrLabel</div>

                                                        foreach (var ssr in ssrs)
                                                        {
                                                            var selectedSSRList = ssr.TravellerSSR.Where(x => x.SSRType == ssrType);

                                                            foreach (var selectSSR in selectedSSRList)
                                                            {
                                                                var showSSR = Model.Flight.FlightInfo.SSRs.FirstOrDefault(x => x.SSRCode == selectSSR.SSRCode);

                                                                if (showSSR != null)
                                                                {
                                                                    <div class="mpjmhd_ans spcl_bigfont1">@(selectSSR.DepartureStation + " > " + selectSSR.ArrivalStation)</div>
                                                                    <div class="mpjmhd_ans spcl_bigfont1">@showSSR.SSRLabel</div>
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="mpjmhd_ans spcl_bigfont1">No checked baggage</div>
                                                }
                                            </div>
                                        }
                                    }
                                    <div class="clear"></div>
                                </div>
                                <div class="clear"></div>
                            </div>
                            <!-- PERSONAL DETAIL END -->
                        </div>
                    }
                </div>
                pTypeCounter++;
                <!-- row end -->
            }
        }
    </div>

</div>

@helper getFlightSegmentRoute(Alphareds.Module.SabreWebService.SWS.FlightSegment[] flightSegments)
    {
        string flightSegmentText = string.Empty;
        for (int i = 0; i < flightSegments.Length; i++)
        {
            flightSegmentText += flightSegments[i].DepartureAirportLocationCode + " > ";

            if (i == flightSegments.Length - 1)
            {
                flightSegmentText += flightSegments[i].ArrivalAirportLocationCode;
            }
        }
        <text>@flightSegmentText</text>
}